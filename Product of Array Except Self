"""
Q:
Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation
Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 

Constraints:

2 <= nums.length <= 105
-30 <= nums[i] <= 30
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
 

Follow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)
"""
### numpy.prod  : use for calculate product of all elements
## for this question we can calculate all elements and divide themself , but there has a special number -- 0.
## if the element is 0, we can make a new list except 0.

import numpy as np

class Solution(object):
    def productExceptSelf(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        result = []
        total = np.prod(nums)
        for i in range(len(nums)):
            if nums[i] != 0:
                result.append(total/nums[i])
            else:
                result.append(np.prod(nums[i+1:] + nums[:i]))
                print(len(nums))
        return result
